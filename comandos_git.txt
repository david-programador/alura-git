git config --local user.name "Seu nome aqui"
git config --local user.email "seu@email.aqui"
git config credential.username "new name"

(ao invés de --local podemos usar o --global para configurar para toda a máquina)

git --version (para verificar a versão instalada do git)

git init (para inicializar um repositório no git)

git status (para algumas informações, como se foi realizado algum commit ou se teve alguma modificação em algum arquivo)


git add <file> (para adicionar um arquivo ao repositório)

git add . (para adicionar todos os arquivos de uma vez)

git rm --cached <file> (para remover arquivos que foram adicionados)

(suponhamos que eu tenha feito alteração em algum arquivo
 eu preciso colocar git add <o nome do arquivo> depois dar o git commit -m "Colocar um comentário")

git log (para mostrar o histórico de commits do seu projeto)

git config --local (para modificar configurações só nesse projeto)
git config --global (para modificar configurações de todo o computador)

git config --local user.name "David Torres" (para mudar o nome)

git config --local user.name (para visualizar o nome configurado)

git config --local user.email "davidribeirotorres@gmail.com" (para configurar o email)

git config --local user.email (para visualizar o email configurado)

git log --oneline (para visulizar os commits de forma resumida)

git log -p (para vermos o que foi alterado nos arquivos e as informações dos commits)

IMPORTANTE (após digitar o comando git log -p para voltar o cmd ao normal apertar a tecla q)

https://devhints.io/git-log (site contendo vários exemplos de comandos do git)

*Como ignorar arquivos: 
(para fazer com que o git ignore um arquivo da pasta local
devemos criar um arquivo na pasta com a nomeclatura .gitignore
e dentro dele adicionamos os nomes dos arquivos que não queremos
que o git fique monitorando, importante precisamos subir o arquivo git ignore no nosso repositório
git add .gitignore 
git commit -m "Adicionando .gitignore")

*Para subir o projeto para o GitHub

1.Crie um repositório no site do GitHub
2.Mude para a opção HTTPS (caso não esteja)
3.Digite no cmd: 

git remote add origin <link do repositório do GitHub>

git push -u origin main (o -u ele deixa definido 
para o repositório que você quer enviar e a brach que você está enviando, 
e da próxima vez você só precisará digitar o 
git push porque já estará definido, mas você pode simplesmente tirar o "-u" e sempre 
digitar o "git push origin main", ou seja 
sempre mostrando o repositório que você quer enviar e a brach que você está enviando)

*Como remover um arquivo de um repositório:

git rm <file>

git commit -m "file.txt removido"

git clone <link do repositório>

git pull (para atualizar o nosso projeto)

git branch (para mostrar as banchs e mostrar em qual estamos)

git branch <nome da branch> (para criar uma branch)

git checkout <nome da branch> (para entrar sair de uma branch e entrar em outra)

git checkout -b (crio uma branch e já entro nela)

git merge <nome da branch> (para realizar o merge da branch digitada para a que você esta atual)

git log --graph (para visualizar as linhas especificas de desenvolvimento)

git rebase <nome da branch> (ele atualiza sem perder o histórico de modificações, ele unie a branch atual com a branch digitada)

*Diferença entre o merge e o rebase:
O merge junta os trabalhos e gera um merge commit. O rebase aplica os commits de outra branch na branch atual.


-- -------------------------------------------------------------------

*Revertendo alterações, nós tópicos abaixo detalhamos alguns pontos de revertendo alterações:

o git checkout nós desfazemos uma alteração que ainda não foi adicionada ao index ou stage, ou seja, antes do git add. Depois de adicionar com git add, para desfazer uma alteração, precisamos tirá-la deste estado, com git reset. Agora, se já realizamos o commit, o comando git revert pode nos salvar.

-- -------------------------------------------------------------------

Sunponhamos que eu tenha rodado o git add e 
adicionado um arquivo para ser commitado e 
queira desfazer, para isso podemos utilizar o git reset HEAD <file>
(o HEAD aqui significa local de trabalho então esse arquivo vai voltar
para o meu local de trabalho)

-- -------------------------------------------------------------------

*Como podemos desfazer um commit:

primeiro rodamos o

git log

que irá trazer o hash do commit e então 
com essa identificação reverter ele em especifico

git revert <hash>

exemplo:

git revert 9839cc5114af348c18115333f400d5d9b1c215ef

-- ----------------------------------------------------------------
*Salvar temporariamente, para só depois commitar:

git stash (ele salva temporariamente todas as alterações feitas nos arquivos, 
é uma opção para quer não quer commitar ainda e já quer passar para outra atividade)

git stash list (retorna uma lista com todas as mudanças que estão salvas temporariamente)

git stash apply <numero da stash salva> (para aplicar as mudanças salvas temporariamente)

Mas mesmo depois de aplicarmos elas, elas continuam lá
por isso precisamos rodar o comando:

git stash drop (para remover as stash salvas temporariamente)

Tem um comando que aplica as mudanças que estão salvas temporariamente e deleta da memória

git stash pop (aplica a última mudança salva temporariamente e depois deleta da memória)

-- ----------------------------------------------------------------------------------------------------

*Viajando no tempo (é possível voltamos para um commit anterior e a partir dele criamos outra branch)

primeiro rode o comando git log --oneline ele mostrará um pedaço dos hash dos commits e a partir
desse pedaço (que já o identifica como único), podemos voltar para esse commit:

git checkout <hash> (voltará para o commit indicado)

E depois podemos criar outra branch utilizando o comando git checkout - b <criar um novo nome para a branch>

-- ----------------------------------------------------------------------------------------------------

*Ver alterações desde um determinado commit até outro, 
podemos visualizar isso através do comando:

git diff <desde hash do commit> .. <até o hash do commit>

-- ----------------------------------------------------------------------------------------------------

*Ver o que foi alterado e ainda não foi commitado,
vemos isso até do:

git diff

-- ----------------------------------------------------------------------------------------------------
*Uma tag marca um marco na minha aplicação, eu posso marcar um commit como um ponto de versão do código
exemplo, se eu quiser disser que a partir de um commit é a versão 1.0 do meu projeto:

git tag -a <versão> -m "Escreva uma mensagem, exemplo está é a primeira vesão (BETA)"

git tag (lista todas as tags, todas as versões)

git push origin <versão> (para subirmos a tag para o git, ele aparece na aba release no git)












